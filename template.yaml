AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS Serverless Spring Boot 2 API - org.umaxcode::photo-blog-application
Globals:
  Api:
    EndpointConfiguration: REGIONAL
    BinaryMediaTypes:
      - multipart/form-data
  Function:
    Runtime: java21
    MemorySize: 512
    Timeout: 30

Parameters:
  DynamoTableName:
    Description: Table name of DynamoDB Table
    Type: String
    Default: picturesInfo
  PrimaryRegion:
    Description: Primary region for deployment
    Type: String
    Default: eu-central-1
  DRRegion:
    Description: Disaster recovery region for failover
    Type: String
    Default: eu-west-1
  CognitoCallbackURL:
    Description: Cognito callback url
    Type: String
    Default: https://spring.io/guides/gs/securing-web


Resources:
  PhotoBlogApplicationFunction: # Lambda function for api gateway
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-APILambda
      Handler: org.umaxcode.StreamLambdaHandler::handleRequest
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref PicturesGlobalTable
        - Statement:
            Effect: Allow
            Action:
              - s3:PutObject
            Resource: !Sub ${StagingBucket.Arn}/*
        - Statement:
            Effect: Allow
            Action:
              - s3:GetObject
              - s3:DeleteObject
              - s3:PutObject
            Resource: !Sub ${PrimaryBucket.Arn}/*
      CodeUri: photo_lambda
      Environment:
        Variables:
          AWS_DYNAMODB_TABLE_NAME: !Ref PicturesGlobalTable
          AWS_S3_STAGE_BUCKET_NAME: !Ref StagingBucket
          AWS_S3_PRIMARY_BUCKET_NAME: !Ref PrimaryBucket
          AWS_COGNITO_USER_POOL_ID: !Ref UserPool
      Events:
        ProxyResource:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: any

  UserPool: # Cognito User Pool
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${AWS::StackName}-user-pool
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
        - Name: given_name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: family_name
          AttributeDataType: String
          Mutable: true
          Required: true
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true

  UserPoolClient: # Cognito User Pool Client
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub ${AWS::StackName}-user-pool-client
      GenerateSecret: true
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      SupportedIdentityProviders:
        - COGNITO
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      CallbackURLs:
        - !Ref CognitoCallbackURL
      UserPoolId: !Ref UserPool
      RefreshTokenValidity: 10
      AccessTokenValidity: 3
      IdTokenValidity: 3
      TokenValidityUnits:
        AccessToken: hours
        IdToken: hours
        RefreshToken: days

  UserPoolDomain: # Cognito User Pool Domain
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub ${AWS::StackName}-user-pool-domain
      UserPoolId: !Ref UserPool

  PostConfAuthLambdaHandler: # Lambda function for handling post confirmation and authentication
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-postConfAuthLambda
      Handler: org.umaxcode.PostConfAuthLambdaHandler::handleRequest
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
              - Effect: Allow
                Action:
                  - sns:Subscribe
                  - sns:SetSubscriptionAttributes
                  - sns:publish
                Resource: !Ref SNSNotificationTopic
      CodeUri: cognito_lambda
      Environment:
        Variables:
          SNS_NOTIFICATION_TOPIC_ARN: !Ref SNSNotificationTopic
      Events:
        CognitoEvents:
          Type: Cognito
          Properties:
            UserPool: !Ref UserPool
            Trigger:
              - PostConfirmation
              - PostAuthentication

  PicturesGlobalTable: # DynamoDB Global Table for image info
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-${DynamoTableName}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: picId
          AttributeType: S
        - AttributeName: owner
          AttributeType: S
        - AttributeName: picUrl
          AttributeType: S
      KeySchema:
        - AttributeName: picId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: ownerIndex
          KeySchema:
            - AttributeName: owner
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: picUrlIndex
          KeySchema:
            - AttributeName: picUrl
              KeyType: HASH
          Projection:
            ProjectionType: ALL
  #      Replicas:
  #        - Region: !Ref PrimaryRegion
  #        - Region: !Ref DRRegion
  #      SSESpecification:
  #        SSEEnabled: true
  #      StreamSpecification:
  #        StreamViewType: NEW_IMAGE

  StagingBucket: # Staging S3 Bucket (for uploading images before processing)
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-staging-bucket
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true

  ImageProcessorStateMachine: # Statemachine for executing the image processing function
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub ${AWS::StackName}-ImgProcessorStateMachine
      DefinitionUri: statemachine/statemachine.asl.json
      DefinitionSubstitutions:
        ImageProcessingLambda: !GetAtt ProcessImageFunction.Arn
        ImageProcessingFailureNotificationLambda: !GetAtt ImageProcessingFailureNotificationFunction.Arn
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref ProcessImageFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref ImageProcessingFailureNotificationFunction
      Events:
        StateChange:
          Type: EventBridgeRule
          Properties:
            EventBusName: default
            Pattern:
              source:
                - aws.s3
              detail-type:
                - Object Created
              detail:
                bucket:
                  name:
                    - !Ref StagingBucket

  ProcessImageFunction: # Lambda function for processing uploaded images
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-imageProcessor
      Handler: org.umaxcode.ImageProcessorLambdaHandler::handleRequest
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:DeleteObject
              Resource: !Sub ${StagingBucket.Arn}/*
        - Statement:
            Effect: Allow
            Action:
              - s3:PutObject
            Resource: !Sub ${PrimaryBucket.Arn}/*
        - Statement:
            Effect: Allow
            Action:
              - dynamodb:PutItem
              - dynamodb:Query
            Resource: !GetAtt PicturesGlobalTable.Arn
        - Statement:
            - Effect: Allow
              Action:
                - execute-api:ManageConnections
              Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
              Resource: !GetAtt WebSocketConnectionsTable.Arn
      CodeUri: statemachine
      Environment:
        Variables:
          AWS_DYNAMODB_TABLE_NAME: !Ref PicturesGlobalTable
          AWS_S3_PRIMARY_BUCKET_NAME: !Ref PrimaryBucket
          WEBSOCKET_CON_TABLE_NAME: !Ref WebSocketConnectionsTable
          API_GATEWAY_WEBSOCKET_ENDPOINT: !Join
            - ""
            - - "https://"
              - !Ref WebSocketApi
              - ".execute-api."
              - !Ref "AWS::Region"
              - ".amazonaws.com/"
              - !Ref WebSocketStage

  SNSNotificationTopic: # SNS for receiving notifications
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${AWS::StackName}-SnsNotificationTopic
      DisplayName: SNS notification topic for receiving notifications

  ImageProcessingFailureNotificationFunction: # Lambda function for sending notification for fail image processing
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-imgProNotificationFunction
      Handler: org.umaxcode.ImageProcessingFailureNotificationFunction::handleRequest
      Policies:
        - AWSLambdaBasicExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - sns:publish
              Resource: !Ref SNSNotificationTopic
      CodeUri: statemachine
      Environment:
        Variables:
          SNS_NOTIFICATION_TOPIC_ARN: !Ref SNSNotificationTopic

  PrimaryBucket: # Primary S3 Bucket (for storing processed images with watermarks)
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-primary-bucket

  WebSocketApi: # Websocket Api for notifying the client when image processing is successful
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub ${AWS::StackName}-MyWebSocketApi
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"

  ConnectRoute: # connect route for the websocket
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      Target: !Sub
        - integrations/${IntegrationId}
        - IntegrationId: !Ref WebSocketIntegration

  DisconnectRoute: # connect route for the websocket
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      Target: !Sub
        - integrations/${IntegrationId}
        - IntegrationId: !Ref WebSocketIntegration

  WebSocketIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub
        arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConnectDisconnectFunction.Arn}/invocations

  WebSocketInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ConnectDisconnectFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*"

  ConnectDisconnectFunction: # Lambda function for managing the connectionId
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-websocketConDisFunction
      Handler: org.umaxcode.WebSocketConDisLambdaHandler::handleRequest
      CodeUri: statemachine
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref WebSocketConnectionsTable
        - Statement:
            - Effect: Allow
              Action:
                - execute-api:ManageConnections
              Resource: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*"
      Environment:
        Variables:
          WEBSOCKET_CONNECTION_TABLE: !Ref WebSocketConnectionsTable

  WebSocketConnectionsTable: # DynamoDB table for storing connection details
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-WebSocketConnections
      AttributeDefinitions:
        - AttributeName: connectionId
          AttributeType: S
        - AttributeName: email
          AttributeType: S
      KeySchema:
        - AttributeName: connectionId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: emailIndex
          KeySchema:
            - AttributeName: email
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST

  WebSocketDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    Properties:
      ApiId: !Ref WebSocketApi
      Description: WebSocket API Deployment
    DependsOn:
      - ConnectRoute
      - DisconnectRoute
      - WebSocketIntegration
      - WebSocketInvokePermission

  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Prod
      ApiId: !Ref WebSocketApi
      DeploymentId: !Ref WebSocketDeployment
      AutoDeploy: true

Outputs:
  PhotoBlogApplicationApi:
    Description: URL for application
    Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/ping'

  UserPool:
    Description: Cognito User Pool ID
    Value: !Ref UserPool

  UserPoolClient:
    Description: Cognito User Pool Application Client ID
    Value: !Ref UserPoolClient

  CognitoLoginURL:
    Description: Cognito User Pool Application Client Hosted Login UI URL
    Value: !Sub "https://${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com/login?client_id=${UserPoolClient}&response_type=code&redirect_uri=${CognitoCallbackURL}"

  StagingBucket:
    Description: "S3 bucket for holding unprocessed uploaded images"
    Value: !Ref StagingBucket

  PrimaryBucket:
    Description: "S3 bucket for holding processed upload images"
    Value: !Ref PrimaryBucket

  WebSocketApiUrl:
    Description: "WebSocket API URL"
    Value: !Join
      - ""
      - - "wss://"
        - !Ref WebSocketApi
        - ".execute-api."
        - !Ref "AWS::Region"
        - ".amazonaws.com/"
        - !Ref WebSocketStage


