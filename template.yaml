AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS Serverless Spring Boot 2 API - org.umaxcode::photo-blog-application
Globals:
  Api:
    EndpointConfiguration: REGIONAL
  Function:
    Runtime: java21
    MemorySize: 512
    Timeout: 30

Parameters:
  DynamoTableName:
    Description: Table name of DynamoDB Table
    Type: String
    Default: picturesInfo
  PrimaryRegion:
    Description: Primary region for deployment
    Type: String
    Default: eu-central-1
  DRRegion:
    Description: Disaster recovery region for failover
    Type: String
    Default: eu-west-1
  CognitoCallbackURL:
    Description: Cognito callback url
    Type: String
    Default: https://spring.io/guides/gs/securing-web


Resources:
  PhotoBlogApplicationFunction: # Lambda function for api gateway
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-APILambda
      Handler: org.umaxcode.lambda_apiGateway.StreamLambdaHandler::handleRequest
      Runtime: java21
      Policies:
        - AWSLambdaBasicExecutionRole
      CodeUri: .
      Events:
        ProxyResource:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: any

  UserPool: # Cognito User Pool
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${AWS::StackName}-user-pool
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
        - Name: given_name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: family_name
          AttributeDataType: String
          Mutable: true
          Required: true
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          TemporaryPasswordValidityDays: 7

  UserPoolClient: # Cognito User Pool Client
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub ${AWS::StackName}-user-pool-client
      GenerateSecret: true
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - profile
      SupportedIdentityProviders:
        - COGNITO
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      CallbackURLs:
        - !Ref CognitoCallbackURL
      UserPoolId: !Ref UserPool
      RefreshTokenValidity: 10
      AccessTokenValidity: 3
      IdTokenValidity: 3
      TokenValidityUnits:
        AccessToken: hours
        IdToken: hours
        RefreshToken: days

  UserPoolDomain: # Cognito User Pool Domain
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub ${AWS::StackName}-user-pool-domain
      UserPoolId: !Ref UserPool

  PicturesGlobalTable: # DynamoDB Global Table
    Type: AWS::DynamoDB::GlobalTable
    Properties:
      TableName: !Ref DynamoTableName
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: picId
          AttributeType: S
        - AttributeName: owner
          AttributeType: S
        - AttributeName: picUrl
          AttributeType: S
      KeySchema:
        - AttributeName: picId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: ownerIndex
          KeySchema:
            - AttributeName: owner
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: picUrlIndex
          KeySchema:
            - AttributeName: picUrl
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      Replicas:
        - Region: !Ref PrimaryRegion
        - Region: !Ref DRRegion
      SSESpecification:
        SSEEnabled: true
      StreamSpecification:
        StreamViewType: NEW_IMAGE

  StagingBucket: # Staging S3 Bucket (for uploading images before processing)
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-staging-bucket

  PrimaryBucket: # Primary S3 Bucket (for storing processed images with watermarks)
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-primary-bucket


Outputs:
  PhotoBlogApplicationApi:
    Description: URL for application
    Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/ping'

  UserPool:
    Description: Cognito User Pool ID
    Value: !Ref UserPool

  UserPoolClient:
    Description: Cognito User Pool Application Client ID
    Value: !Ref UserPoolClient

  CognitoLoginURL:
    Description: Cognito User Pool Application Client Hosted Login UI URL
    Value: !Sub "https://${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com/login?client_id=${UserPoolClient}&response_type=code&redirect_uri=${CognitoCallbackURL}"

