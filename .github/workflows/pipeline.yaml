name: Pipeline

on:
  push:
    branches:
      - "main"

env:
  PIPELINE_USER_ACCESS_KEY_ID: ${{ secrets.PIPELINE_USER_ACCESS_KEY_ID }}
  PIPELINE_USER_SECRET_ACCESS_KEY: ${{ secrets.PIPELINE_USER_SECRET_ACCESS_KEY }}
  SAM_TEMPLATE: template.yaml

  PRIMARY_STACK_NAME: photo-blog-primary
  PRIMARY_PIPELINE_EXECUTION_ROLE: ${{ secrets.PRIMARY_PIPELINE_EXECUTION_ROLE }}
  PRIMARY_CLOUDFORMATION_EXECUTION_ROLE: ${{ secrets.PRIMARY_CLOUDFORMATION_EXECUTION_ROLE }}
  PRIMARY_ARTIFACTS_BUCKET: ${{ secrets.PRIMARY_ARTIFACTS_BUCKET }}
  # If there are functions with "Image" PackageType in your template,
  # uncomment the line below and add "--image-repository ${TESTING_IMAGE_REPOSITORY}" to
  # testing "sam package" and "sam deploy" commands.
  # TESTING_IMAGE_REPOSITORY = '0123456789.dkr.ecr.region.amazonaws.com/repository-name'
  PRIMARY_REGION: ${{ secrets.PRIMARY_REGION }}

  SECONDARY_STACK_NAME: photo-blog-secondary
  SECONDARY_PIPELINE_EXECUTION_ROLE: ${{ secrets.SECONDARY_PIPELINE_EXECUTION_ROLE }}
  SECONDARY_CLOUDFORMATION_EXECUTION_ROLE: ${{ secrets.SECONDARY_CLOUDFORMATION_EXECUTION_ROLE }}
  SECONDARY_ARTIFACTS_BUCKET: ${{ secrets.SECONDARY_ARTIFACTS_BUCKET }}
  # If there are functions with "Image" PackageType in your template,
  # uncomment the line below and add "--image-repository ${PROD_IMAGE_REPOSITORY}" to
  # prod "sam package" and "sam deploy" commands.
  # PROD_IMAGE_REPOSITORY = '0123456789.dkr.ecr.region.amazonaws.com/repository-name'
  SECONDARY_REGION: ${{secrets.SECONDARY_REGION}}

jobs:
  test:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: |
          # trigger the tests here

  build-and-package-for-primary:
    if: github.ref == 'refs/heads/main'
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: Build resources
        run: sam build --template ${SAM_TEMPLATE} --use-container

      - name: Assume the primary pipeline user role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.PRIMARY_REGION }}
          role-to-assume: ${{ env.PRIMARY_PIPELINE_EXECUTION_ROLE }}
          role-session-name: primary-packaging
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Upload artifacts to primary artifact buckets
        run: |
          sam package \
            --s3-bucket ${PRIMARY_ARTIFACTS_BUCKET} \
            --region ${PRIMARY_REGION} \
            --output-template-file packaged-primary.yaml

      - uses: actions/upload-artifact@v4
        with:
          name: packaged-primary.yaml
          path: packaged-primary.yaml

  build-and-package-for-secondary:
    if: github.ref == 'refs/heads/main'
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: Build resources
        run: sam build --template ${SAM_TEMPLATE} --use-container

      - name: Assume the secondary pipeline user role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.SECONDARY_REGION }}
          role-to-assume: ${{ env.SECONDARY_PIPELINE_EXECUTION_ROLE }}
          role-session-name: secondary-packaging
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Upload artifacts to secondary artifact buckets
        run: |
          sam package \
            --s3-bucket ${SECONDARY_ARTIFACTS_BUCKET} \
            --region ${SECONDARY_REGION} \
            --output-template-file packaged-secondary.yaml

      - uses: actions/upload-artifact@v4
        with:
          name: packaged-secondary.yaml
          path: packaged-secondary.yaml

  deploy-primary:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    # Configure GitHub Action Environment to have a manual approval step before deployment to production
    # https://docs.github.com/en/actions/reference/environments
    # environment: <configured-environment>
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
      - uses: actions/download-artifact@v4
        with:
          name: packaged-primary.yaml

      - name: Assume the primary pipeline user role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.PRIMARY_REGION }}
          role-to-assume: ${{ env.PRIMARY_PIPELINE_EXECUTION_ROLE }}
          role-session-name: primary-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Deploy to primary region
        run: |
          sam deploy --stack-name ${PRIMARY_STACK_NAME} \
            --template packaged-primary.yaml \
            --capabilities CAPABILITY_IAM \
            --region ${PRIMARY_REGION} \
            --s3-bucket ${PRIMARY_ARTIFACTS_BUCKET} \
            --no-fail-on-empty-changeset \
            --role-arn ${PRIMARY_CLOUDFORMATION_EXECUTION_ROLE} \
            --parameter-overrides \
              CustomDomainNamePrimary=${{secrets.CUSTOM_DOMAINNAME_PRIMARY}} \
              CustomDomainNameDR=${{ secrets.CUSTOM_DOMAINNAME_DR }} \
              PrimaryACMCertificateArn=${{ secrets.PRIMARY_ACM_CERTIFICATE_ARN }} \
              DRACMCertificateArn=${{ secrets.DR_ACM_CERTIFICATE_ARN }}

  deploy-secondary:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    # Configure GitHub Action Environment to have a manual approval step before deployment to production
    # https://docs.github.com/en/actions/reference/environments
    # environment: <configured-environment>
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
      - uses: actions/download-artifact@v4
        with:
          name: packaged-secondary.yaml

      - name: Assume the secondary pipeline user role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.SECONDARY_REGION }}
          role-to-assume: ${{ env.SECONDARY_PIPELINE_EXECUTION_ROLE }}
          role-session-name: secondary-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Deploy to secondary region
        run: |
          sam deploy --stack-name ${SECONDARY_STACK_NAME} \
            --template packaged-secondary.yaml \
            --capabilities CAPABILITY_IAM \
            --region ${SECONDARY_REGION} \
            --s3-bucket ${SECONDARY_ARTIFACTS_BUCKET} \
            --no-fail-on-empty-changeset \
            --role-arn ${SECONDARY_CLOUDFORMATION_EXECUTION_ROLE} \
            --parameter-overrides \
              CustomDomainNamePrimary=${{secrets.CUSTOM_DOMAINNAME_PRIMARY}} \
              CustomDomainNameDR=${{ secrets.CUSTOM_DOMAINNAME_DR }} \
              PrimaryACMCertificateArn=${{ secrets.PRIMARY_ACM_CERTIFICATE_ARN }} \
              DRACMCertificateArn=${{ secrets.DR_ACM_CERTIFICATE_ARN }}
